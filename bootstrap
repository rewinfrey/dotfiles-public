#!/bin/bash

set -euo pipefail
set -x

OS="${1:-linux}"

if [ -z "${USER:-}" ]; then
    USER=$(id -un)
fi

echo >&2 "====================================================================="
echo >&2 " Setting up environment for $OS"
echo >&2 ""
echo >&2 " USER        $USER"
echo >&2 " HOME        $HOME"
echo >&2 ""
echo >&2 "====================================================================="

cd "$HOME"

# Clean environment
if [ "${OS}" != "mac" ]; then
    rm -rf .oh-my-bash .oh-my-zsh
fi

# Clone dotfiles if not already present
dotfiles_dir="$HOME/dotfiles-public"
if [ ! -d "$dotfiles_dir" ]; then
    git clone https://github.com/rewinfrey/dotfiles-public.git "$dotfiles_dir"
else
    echo "dotfiles directory already exists. Skipping clone..."
fi

install_nvim_linux() {
    NVIM_VERSION=0.9.1
    sudo apt-get update
    sudo apt-get install -y libfuse2 curl
    curl -LO https://github.com/neovim/neovim/releases/download/v${NVIM_VERSION}/nvim.appimage
    chmod u+x nvim.appimage
    ./nvim.appimage --appimage-extract
    ./squashfs-root/AppRun --version
    sudo mv squashfs-root /nvim-${NVIM_VERSION}
    sudo ln -sf /nvim-${NVIM_VERSION}/AppRun /usr/bin/nvim
}

install_nvim_mac() {
    if ! command -v brew >/dev/null; then
        echo "Homebrew not found. Installing..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
    brew install neovim
}

install_packages_linux() {
    sudo apt-get install -y tmux direnv fzf ripgrep zsh
}

install_packages_mac() {
    brew install tmux direnv fzf ripgrep zsh
}

if [ "$OS" = "mac" ]; then
    install_nvim_mac
    install_packages_mac
    ZSH_PATH="$(which zsh)"
else
    export SUDO_ASKPASS=/bin/true
    install_nvim_linux
    install_packages_linux
    ZSH_PATH="/usr/bin/zsh"
fi

# Function to create symlink with error handling
create_symlink() {
  source="$1"
  target="$2"
  force="${3:-}"
  echo "Creating symlink: $target -> $source"

  # Ensure parent directory of target exists
  target_dir=$(dirname "$target")
  mkdir -p "$target_dir"

  if [ -L "$target" ]; then
    existing_link=$(readlink "$target")
    if [ "$existing_link" = "$source" ]; then
      echo "Symlink already exists. Skipping..."
      return
    else
      echo "Removing existing symlink: $target"
      rm "$target"
    fi
  elif [ -e "$target" ]; then
    if [ -n "$force" ]; then
      echo "Moving existing file: $target to $target.bak"
      mv "$target" "$target.bak"
    else
      echo "Error: $target exists and is not a symlink. Skipping..."
      return
    fi
  fi

  ln -s "$source" "$target"
}

# Create symlinks
create_symlink "$dotfiles_dir/.gitignore" "$HOME/.gitignore" "force"
create_symlink "$dotfiles_dir/.zshrc" "$HOME/.zshrc" "force"
create_symlink "$dotfiles_dir/.zshenv" "$HOME/.zshenv" "force"
create_symlink "$dotfiles_dir/.config/nvim" "$HOME/.config/nvim"
create_symlink "$dotfiles_dir/.tmux.conf" "$HOME/.tmux.conf"
create_symlink "$dotfiles_dir/.hushlogin" "$HOME/.hushlogin"
create_symlink "$dotfiles_dir/.aerospace.toml" "$HOME/.aerospace.toml"

# Change shell to zsh (only for Linux/Codespaces)
if [ "$OS" != "mac" ]; then
    if [ "$SHELL" != "$ZSH_PATH" ]; then
        echo "Changing shell to zsh: $ZSH_PATH"
        sudo chsh -s "$ZSH_PATH" "$USER"
    fi
fi
